name: Scan with Corellium MATRIX

on:
  pull_request:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'schedule' && 'scheduled' || 'non-scheduled' }}
  cancel-in-progress: false

env:
  VPN_CONFIG_PATH: /home/runner/my_vpn_config.ovpn
  INSTANCE_ARTIFACTS_PATH: /tmp/matrix_artifacts.zip
  RUNNER_ARTIFACTS_PATH: /home/runner/matrix_artifacts.zip
  MATRIX_INSTANCE_ID: ${{ github.event_name == 'schedule' && vars.MATRIX_AUTOMATION_INSTANCE
                        || vars.MATRIX_DEVELOPMENT_INSTANCE }}

jobs:
  corellium-matrixscan:
    name: Scan with MATRIX
    runs-on: ubuntu-latest
    steps:
      - name: Pull the latest code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: 22
      - name: Install Corellium CLI
        run: |
          curl --silent https://status.npmjs.org | grep --quiet "All Systems Operational" ||
            echo "The npm registry may be down"
          npm install --global @corellium/corellium-cli
      - name: Log in to Corellium
        run: |
          corellium login \
            --apitoken ${{ secrets.CORELLIUM_API_TOKEN }} \
            --endpoint  ${{ secrets.CORELLIUM_API_ENDPOINT }}
      - name: Start instance and wait until ready
        timeout-minutes: 20
        run: |
          set -e
          source ./src/functions.sh
          start_instance "${{ env.MATRIX_INSTANCE_ID }}"
          wait_until_agent_ready "${{ env.MATRIX_INSTANCE_ID }}"
      - name: Install VPN dep
        run: |
          if ! command -v openvpn; then
            sudo apt -qq update
            sudo apt -qq install -y openvpn
          fi
      - name: Connect to project VPN
        run: |
          echo "${{ secrets.MATRIX_PROJECT_OVPN_CONFIG }}" > "${{ env.VPN_CONFIG_PATH }}"
          echo 'DEBUG READING THE CONFIG FILE'
          cat "${{ env.VPN_CONFIG_PATH }}"
          # TODO: remove debug message, cat, and verbose flag
          sudo openvpn --config "${{ env.VPN_CONFIG_PATH }}" --daemon --verbose
      - name: Verify VPN tunnel is established
        timeout-minutes: 1
        run: |
          # TODO: get services IP dynamically
          until ping -c5 10.11.3.2; do sleep 1; done
          until ping -c2 10.11.1.1; do sleep 1; done
      - name: Install Corellium Cafe from URL
        run: |
          set -e
          source ./src/functions.sh
          install_corellium_cafe_ios "${{ env.MATRIX_INSTANCE_ID }}"
      - name: Run Corellium Cafe MATRIX assessment
        env:
          CORELLIUM_API_ENDPOINT: ${{ secrets.CORELLIUM_API_ENDPOINT }}
          CORELLIUM_API_TOKEN: ${{ secrets.CORELLIUM_API_TOKEN }}
        run: |
          set -e
          source ./src/functions.sh
          if ! run_matrix_cafe_checks "${{ env.MATRIX_INSTANCE_ID }}"; then
            echo 'Warning - First MATRIX run failed. Retrying once.'
            run_matrix_cafe_checks "${{ env.MATRIX_INSTANCE_ID }}"
          fi
      - name: Clean up VPN connection
        if: always()
        run: |
            sudo killall openvpn
            rm "${{ env.VPN_CONFIG_PATH }}"
      - name: Download MATRIX artifacts from VM to runner
        env:
          CORELLIUM_API_ENDPOINT: ${{ secrets.CORELLIUM_API_ENDPOINT }}
          CORELLIUM_API_TOKEN: ${{ secrets.CORELLIUM_API_TOKEN }}
          MATRIX_INSATNCE_ID: ${{ env.MATRIX_INSTANCE_ID }}
        run: |
          set -ex
          source ./src/functions.sh
          npm install @corellium/corellium-api
          node ./src/zip_matrix_artifacts.js
          download_file_to_local_path \
            "${{ env.MATRIX_INSTANCE_ID }}" \
            "${INSTANCE_ARTIFACTS_PATH}" \
            "${RUNNER_ARTIFACTS_PATH}"
          ls -la "${RUNNER_ARTIFACTS_PATH}"
          sha256sum "${RUNNER_ARTIFACTS_PATH}"

      - name: Stop instance
        env:
          CORELLIUM_API_ENDPOINT: ${{ secrets.CORELLIUM_API_ENDPOINT }}
          CORELLIUM_API_TOKEN: ${{ secrets.CORELLIUM_API_TOKEN }}
        run: |
          set -e
          source ./src/functions.sh
          stop_instance "${{ env.MATRIX_INSTANCE_ID }}"
      - name: Upload MATRIX runtime artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-runtime-artifacts
          path: |
            ${{ env.RUNNER_ARTIFACTS_PATH }}
          compression-level: 9
          if-no-files-found: error
      - name: Upload MATRIX report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-reports
          path: |
            matrix_report_*.html
            matrix_report_*.json
          compression-level: 9
          if-no-files-found: error
